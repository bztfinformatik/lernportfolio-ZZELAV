"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8967],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(t),c=r,g=p["".concat(o,".").concat(c)]||p[c]||u[c]||i;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9662:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:2,title:"Tag 12",pagination_prev:null,tags:["Tag 12","PHP","LB1 / LB2","Datenbank","mysql","PDO"]},l="Tag 12",s={unversionedId:"tag-0012/index",id:"tag-0012/index",title:"Tag 12",description:"Arbeiten an LB1 / LB2",source:"@site/docs/tag-0012/index.md",sourceDirName:"tag-0012",slug:"/tag-0012/",permalink:"/lernportfolio-ZZELAV/docs/tag-0012/",draft:!1,tags:[{label:"Tag 12",permalink:"/lernportfolio-ZZELAV/docs/tags/tag-12"},{label:"PHP",permalink:"/lernportfolio-ZZELAV/docs/tags/php"},{label:"LB1 / LB2",permalink:"/lernportfolio-ZZELAV/docs/tags/lb-1-lb-2"},{label:"Datenbank",permalink:"/lernportfolio-ZZELAV/docs/tags/datenbank"},{label:"mysql",permalink:"/lernportfolio-ZZELAV/docs/tags/mysql"},{label:"PDO",permalink:"/lernportfolio-ZZELAV/docs/tags/pdo"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Tag 12",pagination_prev:null,tags:["Tag 12","PHP","LB1 / LB2","Datenbank","mysql","PDO"]},sidebar:"tutorialSidebar",next:{title:"Tag 13",permalink:"/lernportfolio-ZZELAV/docs/tag-0013/"}},o={},d=[{value:"1 Datenbankzugriffe",id:"1-datenbankzugriffe",level:2},{value:"1.1 mysql",id:"11-mysql",level:3},{value:"1.2 mysqli",id:"12-mysqli",level:3},{value:"1.3 PDO",id:"13-pdo",level:3},{value:"2 Prepared statements",id:"2-prepared-statements",level:2},{value:"2.1 SQL Injection",id:"21-sql-injection",level:3}],m={toc:d};function p(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tag-12"},"Tag 12"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Arbeiten an LB1 / LB2")),(0,r.kt)("h2",{id:"1-datenbankzugriffe"},"1 Datenbankzugriffe"),(0,r.kt)("h3",{id:"11-mysql"},"1.1 mysql"),(0,r.kt)("p",null,"Die mysql-Extension ist veraltet und sollte nicht mehr genutzt werden. Die Performance ist niedrig und es gibt kein OOP. Offizielle Warnung von PHP:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("img",{alt:"MySQL PHP Warning",src:t(9277).Z,width:"1029",height:"74"})),(0,r.kt)("h3",{id:"12-mysqli"},"1.2 mysqli"),(0,r.kt)("p",null,"Die mysqli-Extension ist die Weiterentwicklung von der der urspr\xfcnglichen mysql-Extension und kann auch OOP. Das i steht f\xfcr ",(0,r.kt)("em",{parentName:"p"},"improved"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$aid = $_GET['aid'];\n\n// Connection\n$mysqli = new mysqli('127.0.0.1', 'your_user', 'your_pass', 'sakila');\n\nif ($mysqli->connect_errno) {\n  // Error-Handling\n  exit;\n}\n\n$sql = \"SELECT actor_id, first_name, last_name FROM actor WHERE actor_id = $aid\";\nif (!$result = $mysqli->query($sql)) {\n  // Oh no! The query failed.\n  echo \"Sorry, the website is experiencing problems.\";\n  exit;\n}\n\nif ($result->num_rows === 0) {\n  echo \"We could not find a match for ID $aid, sorry about that. Please try again.\";\n  exit;\n}\n")),(0,r.kt)("p",null,"Als erstes wird per GET-Varialbe ein Wert geholt. Dies hat noch nichts mit SQL zu tun. die new ",(0,r.kt)("inlineCode",{parentName:"p"},"mysqli()"),"-Funktion erstellt eine Verbindung zu einer Datenbank. Die Reihenfolge der Argumente ist wie folgt: ",(0,r.kt)("inlineCode",{parentName:"p"},"'HOST', 'USERNAME', 'PASSWORD', 'DATABASE'"),". Mit ",(0,r.kt)("inlineCode",{parentName:"p"},"connect_errno")," kann bei einem Verbindungsproblem das Programm beendet werden. Die Funktion ",(0,r.kt)("inlineCode",{parentName:"p"},"query()")," nimmt als Argument eine SQL-Query und fr\xe4gt diese bei der Datenbank ab."),(0,r.kt)("h3",{id:"13-pdo"},"1.3 PDO"),(0,r.kt)("p",null,"PDO ist rein OOP und hat eine hohe Performance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$pdo = new PDO('mysql:host=localhost;dbname=databasename', 'username', 'password');\n\n$statement = $pdo->prepare(\"SELECT * FROM users WHERE vorname = :vorname AND nachname = :nachname\");\n$statement->execute(array(':vorname' => 'Max', ':nachname' => 'Mustermann'));\nwhile($row = $statement->fetch()) {\n  echo $row['vorname'].\" \".$row['nachname'].\"<br />\";\n  echo \"E-Mail: \".$row['email'].\"<br /><br />\";\n}\n\n$anzahl_user = $statement->rowCount();\necho \"Es wurden $anzahl_user gefunden\";\n\n$statement = $pdo->prepare(\"INSERT INTO users (email, vorname, nachname) VALUES (?, ?, ?)\");\n$statement->execute(array('info@php-einfach.de', 'Klaus', 'Neumann'));\n\n$neue_id = $pdo->lastInsertId();\necho \"Neuer Nutzer mit id $neue_id angelegt\";\n?>\n")),(0,r.kt)("p",null,"Bei PDO kann mit ",(0,r.kt)("inlineCode",{parentName:"p"},"new PDO()")," eine Datenbankverbindung herstgestellt werden. Die Reihenfolge der Argumente ist wie folgt: ",(0,r.kt)("inlineCode",{parentName:"p"},"DBMS:host=HOST;dbname=DATABASE', 'USERNAME', 'PASSWORD'"),". Mit der Funktion ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare()")," kann eine SQL-Query ",(0,r.kt)("strong",{parentName:"p"},"vorbereitet")," werden. In diesem Statement werden nur Variablen eingesetzt. Mit ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()")," kann diese dann ausgef\xfchrt werden. Daf\xfcr kann mit einem PHP-Array die Variable zu einem Wert gelinkt werden. Mit ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," k\xf6nnen die Resultate ausgelesen werden."),(0,r.kt)("h2",{id:"2-prepared-statements"},"2 Prepared statements"),(0,r.kt)("p",null,"Prepared statements werden genutzt um immer wieder die gleiche SQL-Query mit m\xf6glichst hoher Effizienz auszuf\xfchren. Ein prepared statement kann wie folgt aussehen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- mysqli\nINSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\n\n-- PDO\nINSERT INTO MyGuests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)\n")),(0,r.kt)("p",null,"Dieses statement wird der Datenbank geschickt und die Daten werden leer gelassen (in mysqli mit ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", in PDO mit ",(0,r.kt)("inlineCode",{parentName:"p"},":STRING"),"). Sp\xe4ter im Programm werden dann die Daten in die Platzhalter eingef\xfcllt und in der Datenbank gespeichert."),(0,r.kt)("p",null,"Vorteile von Prepared statement:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Es ist schneller auszuf\xfchren, da das eigentliche statement nur einmal an die Datenbank geschickt wird"),(0,r.kt)("li",{parentName:"ul"},"Es wird weniger Bandbreite gebraucht um die Daten in der Datenbank zu speichern (es werden nur die Daten gesendet und nicht das ganze statement)"),(0,r.kt)("li",{parentName:"ul"},'Sie helfen gegen SQL Injections, da die Daten mit einem anderen Protokoll an die Datenbank gesendet werden, wo sie "escaped" werden.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// prepare sql and bind parameters\n  $stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)\");\n  $stmt->bindParam(':firstname', $firstname);\n  $stmt->bindParam(':lastname', $lastname);\n  $stmt->bindParam(':email', $email);\n")),(0,r.kt)("p",null,"Als erstes wird mit ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare()")," das statement vorbereitet. Anschliessend m\xfcssen mit ",(0,r.kt)("inlineCode",{parentName:"p"},"bindParam()")," die Werte zu den Platzhaltern gebunden werden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'// set parameters and execute\n$firstname = "John";\n$lastname = "Doe";\n$email = "john@example.com";\n$stmt->execute();\n')),(0,r.kt)("p",null,"Danach k\xf6nnen die Variablen mit den Werten gef\xfcllt werden und mit der Funktion ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()")," ausgef\xfchrt werden. Dieser Teil kann so oft wie n\xf6tig wiederholt werden."),(0,r.kt)("p",null,"Als letztes muss die Datenbankverbindung geschlossen werden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$conn = null;\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.w3schools.com/php/php_mysql_prepared_statements.asp"},"Prepared statement W3schools")),(0,r.kt)("h3",{id:"21-sql-injection"},"2.1 SQL Injection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$aid = $_GET[\'aid\'];\n// $aid ist jetzt gleich -> "42;UPDATE USER SET TYPE="admin" WHERE ID=23;"\n$sql = "SELECT actor_id, first_name, last_name FROM actor WHERE actor_id = $aid";\n// sql ist jetzt gleich -> SELECT actor_id, first_name,\n// last_name FROM actor WHERE actor_id =\n// 42;UPDATE USER SET TYPE="admin" WHERE ID=23;\n')),(0,r.kt)("p",null,"In diesem Fall werden mit einer SQL-Query die an die Datenbank geschickt werden, gleich zwei Sachen ausgef\xfchrt und zwar schlimme Sachen. Das zweite statement updated den User zum Admin."))}p.isMDXComponent=!0},9277:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/mysql_php_warning-f2aed2f5bde50208590a66b02a160968.png"}}]);