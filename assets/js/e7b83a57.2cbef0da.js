"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[468],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>g});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=t.createContext({}),o=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=o(e.components);return t.createElement(d.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=o(r),m=i,g=p["".concat(d,".").concat(m)]||p[m]||c[m]||l;return r?t.createElement(g,a(a({ref:n},u),{},{components:r})):t.createElement(g,a({ref:n},u))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=r.length,a=new Array(l);a[0]=m;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var o=2;o<l;o++)a[o]=r[o];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8663:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var t=r(7462),i=(r(7294),r(3905));const l={},a="Auftrag",s={unversionedId:"tag-0005/auftrag",id:"tag-0005/auftrag",title:"Auftrag",description:"1 Objektorientierte Programmierung",source:"@site/docs/tag-0005/auftrag.md",sourceDirName:"tag-0005",slug:"/tag-0005/auftrag",permalink:"/lernportfolio-ZZELAV/docs/tag-0005/auftrag",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tag 5",permalink:"/lernportfolio-ZZELAV/docs/tag-0005/"},next:{title:"Reflexion",permalink:"/lernportfolio-ZZELAV/docs/tag-0005/reflexion"}},d={},o=[{value:"1 Objektorientierte Programmierung",id:"1-objektorientierte-programmierung",level:2},{value:"1.1 Einf\xfchrung",id:"11-einf\xfchrung",level:3},{value:"1.1.1 Klasse",id:"111-klasse",level:4},{value:"1.1.2 Objekt",id:"112-objekt",level:4},{value:"1.2 Beispiel Webshop",id:"12-beispiel-webshop",level:3},{value:"1.3 Grundlagen",id:"13-grundlagen",level:3},{value:"1.4 Notizen OOP",id:"14-notizen-oop",level:3},{value:"1.4.1 Wie wird in PHP instanziert?",id:"141-wie-wird-in-php-instanziert",level:4},{value:"1.4.2 Was bedeutet der Pfeil?",id:"142-was-bedeutet-der-pfeil",level:4},{value:"1.4.3 Was bedeutet <code>$this</code>?",id:"143-was-bedeutet-this",level:4},{value:"1.4.4 Welche M\xf6glichkeiten an Zugriffsmodifizierer kennt PHP?",id:"144-welche-m\xf6glichkeiten-an-zugriffsmodifizierer-kennt-php",level:4},{value:"1.4.5 Dokumentieren Sie Beispiele zu Konstruktoren, Methoden, Klassen",id:"145-dokumentieren-sie-beispiele-zu-konstruktoren-methoden-klassen",level:4},{value:"1.4.6  Dokumentieren Sie die Beispiele zur Vererbung mit PHP",id:"146--dokumentieren-sie-die-beispiele-zur-vererbung-mit-php",level:4},{value:"2 MVC (Model-View-Controller)",id:"2-mvc-model-view-controller",level:2},{value:"2.1 Warum MVC",id:"21-warum-mvc",level:3},{value:"2.2 Model",id:"22-model",level:3},{value:"2.3 View",id:"23-view",level:3},{value:"2.4 Controller",id:"24-controller",level:3}],u={toc:o};function p(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"auftrag"},"Auftrag"),(0,i.kt)("h2",{id:"1-objektorientierte-programmierung"},"1 Objektorientierte Programmierung"),(0,i.kt)("p",null,"Objektorientierte Programmierung (OOP) macht den Code leichter wartbar und kann beim wiederverwenden von z.B. Funktionen helfen."),(0,i.kt)("h3",{id:"11-einf\xfchrung"},"1.1 Einf\xfchrung"),(0,i.kt)("p",null,"Bei OOP gibt es zwei wichtige Begriffe: ",(0,i.kt)("strong",{parentName:"p"},"Klassen")," und ",(0,i.kt)("strong",{parentName:"p"},"Objekte"),"."),(0,i.kt)("h4",{id:"111-klasse"},"1.1.1 Klasse"),(0,i.kt)("p",null,"In Klassen werden Eigenschaften und Methoden definiert. Vergleicht man es mit einem Stuhl (Stuhl ist die Klasse), dann hat der Stuhl die Eigenschaft, vier Beine zu haben und auf ihm kann gesessen werden."),(0,i.kt)("h4",{id:"112-objekt"},"1.1.2 Objekt"),(0,i.kt)("p",null,"Objekte sind das Nutzen der Klassen als Instanz. Steht z.B. der Stuhl in der K\xfcche, dann w\xe4re der Stuhl ein Objekt."),(0,i.kt)("h3",{id:"12-beispiel-webshop"},"1.2 Beispiel Webshop"),(0,i.kt)("p",null,"M\xf6chte man einen Webshop programmieren, so werden folgende Klassen ben\xf6tigt:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"User")," - Ist eine Person, mit einem Benutzernamen, Passwort und E-Mail.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Product")," - Alle Produkte die im Shop verf\xfcgbar sind, dieses Produkt hat einen Namen, Preis, Beschreibung und vielleicht ein Produktbild.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Productorder")," - Die Bestellungen der Benutzer m\xfcssen auch abgelegt werden, diese enthalten Benutzer und Produkte."),(0,i.kt)("h3",{id:"13-grundlagen"},"1.3 Grundlagen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n//Definition der Klasse User\nclass User {\n    //Definition der Eigenschaften name, email und password\n    public $name;\n    public $email;\n    public $password;\n\n    //Definition der Methode setEmail\n    function setEmail($newEmail) {\n        if(filter_var($newEmail, FILTER_VALIDATE_EMAIL) !== false) {\n            $this->email = $newEmail;\n            return true;\n        }\n        return false; //Neue E-Mail-Adresse konnte nicht gespeichert werden, da diese ung\xfcltig war\n    }\n}\n\n//Definition von zwei Objekten, Max und Lisa\n$max = new User();\n$max->name = "Max Mustermann";\n$max->setEmail("max@muster.de");\n\n$lisa = new User();\n$lisa->name = "Lisa Meier";\n$lisa->setEmail("lisa@meier.de");\n\necho "Max hat die E-Mail $max->email und Lisa die E-Mail $lisa->email";\n?>\n')),(0,i.kt)("p",null,"Als erstes wird eine Klasse, zwischen den geschweiften Klammern wird alles was mit der Klasse zu tun hat geschrieben. Nach der Definition der Klasse, kommen die Eigenschaften, diese sind ",(0,i.kt)("inlineCode",{parentName:"p"},"public"),", d.h. sie k\xf6nnen von jedem aufgerufen werden. Eigenschaften sind nichts anderes als Variablen. Als n\xe4chstes folgen die Methoden. In unserem Beispiel \xfcberpr\xfcft die Methode ",(0,i.kt)("inlineCode",{parentName:"p"},"setEmail()")," ob eine g\xfcltige E-Mail eingegeben wurde."),(0,i.kt)("p",null,"Die Klasse wird jetzt mit der ",(0,i.kt)("inlineCode",{parentName:"p"},"}")," geschlossen und jetzt folgen die Objekte. Um ein Objekt der Klasse ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," zu erstellen, verwendet man das Schl\xfcsselwort ",(0,i.kt)("inlineCode",{parentName:"p"},"new"),". Somit k\xf6nnen so viele User erstellt werden, wie man m\xf6chte, in unserem zwei, Max und Lisa. Nach dem erstellen der Objekte mit ",(0,i.kt)("inlineCode",{parentName:"p"},"new"),", k\xf6nnen wir die Eigenschaften f\xfcr diese User definieren, wie Name und E-Mail."),(0,i.kt)("h3",{id:"14-notizen-oop"},"1.4 Notizen OOP"),(0,i.kt)("h4",{id:"141-wie-wird-in-php-instanziert"},"1.4.1 Wie wird in PHP instanziert?"),(0,i.kt)("p",null,'"Instanzieren" ist das erstellen eines Objekt von einer Klasse.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$objekt = new Klasse();\n?>\n")),(0,i.kt)("h4",{id:"142-was-bedeutet-der-pfeil"},"1.4.2 Was bedeutet der Pfeil?"),(0,i.kt)("p",null,"Mit dem ",(0,i.kt)("inlineCode",{parentName:"p"},"->")," k\xf6nnen Methoden und Eigenschaften vom Objekt (von der Klasse) aufgerufen werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$objekt->methode();\n$objekt->eigenschaft = "";\n?>\n')),(0,i.kt)("h4",{id:"143-was-bedeutet-this"},"1.4.3 Was bedeutet ",(0,i.kt)("inlineCode",{parentName:"h4"},"$this"),"?"),(0,i.kt)("p",null,"Mit ",(0,i.kt)("inlineCode",{parentName:"p"},"$this")," k\xf6nnen Eigenschaften und Methoden von Objekten innerhalb einer Klasse aufgerufen werden, die nicht instanziert sind. Es wird das Objekt dieser Klasse aufgerufen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nclass Klasse {\n    public $eigenschaft;\n\n    public function methode() {\n        return "Hello World";\n    }\n\n    $this->eigenschaft = "";\n    $this->methode();\n}\n?>\n')),(0,i.kt)("h4",{id:"144-welche-m\xf6glichkeiten-an-zugriffsmodifizierer-kennt-php"},"1.4.4 Welche M\xf6glichkeiten an Zugriffsmodifizierer kennt PHP?"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"public"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"protected"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"private")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"public"),": Kann von \xfcberall drauf zugegriffen werden.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"protected"),": Nur Elternklassen, abgeleitete Klassen un die eigene k\xf6nnen zugreifen.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"private"),": Nur die eigene Klasse kann zugreifen."),(0,i.kt)("h4",{id:"145-dokumentieren-sie-beispiele-zu-konstruktoren-methoden-klassen"},"1.4.5 Dokumentieren Sie Beispiele zu Konstruktoren, Methoden, Klassen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\n// Klasse erstellen\nclass Klasse {\n    // Konstruktor definieren, der die Methode "methode()" aufruft\n    public function __construct() {\n        // Mit $this, die Methode "methode()" aufrufen\n        $this->methode();\n    }\n\n    // Methode, die von \xfcberall aufgerufen werden kann, erstellen\n    public function methode() {\n        print "Hello World<br>";\n    }\n}\n\n// Neues Objekt der Klasse erstellen (wird den Konstruktor ausf\xfchren)\n$obj = new Klasse();\n\n// Methode direkt aufrufen\n$obj->methode();\n?>\n')),(0,i.kt)("h4",{id:"146--dokumentieren-sie-die-beispiele-zur-vererbung-mit-php"},"1.4.6  Dokumentieren Sie die Beispiele zur Vererbung mit PHP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nclass ElternKlasse {\n    public function __construct() {\n        print "Elternklasse<br>";\n    }\n}\n\nclass SubKlasse1 extends ElternKlasse {\n    public function __construct() {\n        parent::__construct();\n        print "Subklasse<br>";\n    }\n}\n\nclass SubKlasse2 extends ElternKlasse {\n    // __construct von ElternKlasse\n}\n\n$elternKlasseObj = new ElternKlasse();\n\n$subKlasse1Obj = new SubKlasse1();\n\n$subKlasse2Obj = new SubKlasse2();\n?>\n')),(0,i.kt)("h2",{id:"2-mvc-model-view-controller"},"2 MVC (Model-View-Controller)"),(0,i.kt)("p",null,"Model-View-Controller ist das h\xe4ufigste Design Pattern in PHP. Bei MVC wird das Klassendesign in drei verschiedene Kategorieren unterteilt:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Model"),": F\xfcr jede Entit\xe4t wird eine eigene Model-Klasse erstellt, am Beispiel des Online-Shops, h\xe4tte man eine Model-Klasse f\xfcr User, eine f\xfcr Artikel, usw. Die Model-Klassen sind daf\xfcr zust\xe4ndig, dass die Daten aus der Datenbank geladen und gespeichert werden.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"View"),": View ist zust\xe4ndig f\xfcr die Darstellung. Dazu geh\xf6ren Templates die HTML und CSS zur\xfcckgegeben. Im View ist keine Logik eingebunden.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Controller"),': Der Controller verbindet das Model und die View. Hier ist die Logik der Applikation verankert, z.B. kommen Login-Daten von der View, der Controller \xfcberpr\xfcft diese auf G\xfcltigkeit und falls diese stimmen, "sagt" der Controller der View, dass die n\xe4chste Seite angezeigt werden soll.'),(0,i.kt)("h3",{id:"21-warum-mvc"},"2.1 Warum MVC"),(0,i.kt)("p",null,"Ein Vorteil ist die Trennung zwischen Verarbeitung (Model), Darstellung (View) und der Logik (Controller). Muss an der Datenstruktur etwas ge\xe4ndert werden, so muss dies nur in der Model-Klasse gemacht werden. An der Darstellung under Logik muss nichts gemacht werden. M\xf6chte man zur Web-Version auch eine Mobile-Version erstellen, muss nur eine neue View erstellt werden. Somit ist die Wartung der einzelnen Komponenten einfacher und die Person, die f\xfcr die View zust\xe4ndig ist, muss keine Ahnung von der Logik oder der Daten haben."),(0,i.kt)("h3",{id:"22-model"},"2.2 Model"),(0,i.kt)("p",null,"Im Model wird der Datenbankzugriff programmiert."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n//$pdo enth\xe4lt die Datenbankverbindung\n \nclass User {\n   // Klasse zur Abbildung eurer Benutzer\n \n   public static function newUser($email, $vorname, $nachname, $passwort) {\n   }\n \n   public static function findByEmail($email) {\n   }\n \n \n   public function delete() {\n   }\n \n   public function setPassword($newPassword) {\n   }\n \n}\n \nclass Product {\n   // Klasse zur Darstellung von Produkten im Online-Shop \xe4hnlich wie oben\n   //...\n}\n \nclass ProductOrder {\n   // Klasse zur Darstellung neuer Produktbestellungen\n   public function __constructor(User $user) {\n   }\n \n   public function addProduct(Product $product) {\n   }\n \n   public function addProductById($productId) {\n   }\n \n   public function buy() {\n   } \n}\n?>\n")),(0,i.kt)("p",null,"Weiterfolgende Programmierung wird dadurch einfacher."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$max = User::findByEmail("max@muster.de");\n \n$order = new ProductOrder($max);\n$order->addProductById(23);\n$order->addProductById(42);\n \nif($order->buy()) {\n   echo "Gesamtpreis der Bestellung: ".$order->price();\n}\n?>\n')),(0,i.kt)("h3",{id:"23-view"},"2.3 View"),(0,i.kt)("p",null,"Im View wird die Darstellung programmiert."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$max = User::findByEmail("max@muster.de");\n \n$order = new ProductOrder($max);\n$order->addProductById(23);\n$order->addProductById(42);\n \nif($order->buy()) {\n   include("order-successful.view.php");\n} else {\n   include("order-failed.view.php");\n}\n?>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="order-successful.view.php"',title:'"order-successful.view.php"'},"Deine Bestellung \xfcber <?php echo $order->getPrice(); ?> war <b>erfolgreich</b>.\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="order-failed.view.php"',title:'"order-failed.view.php"'},"Deine Bestellung ist leider <b>fehlgeschlagen</b>. Bitte kontaktiere unseren Support.\n")),(0,i.kt)("h3",{id:"24-controller"},"2.4 Controller"),(0,i.kt)("p",null,"Der Controller implementiert die Logik."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nclass UserController {\n public function registerNewUser($email, $password) {\n //Entsprechende \xdcberpr\xfcfungen und SQL Queries zum Registrieren des Nutzers\n //Gibt z.B. true zur\xfcck, falls die Registrierung funktioniert hat\n }\n \n public function changeUserPassword(User $user, $new_password) {\n //\xc4ndert das Benutzerpasswort f\xfcr den Nutzer $user\n }\n \n public function sendNewPassword(User $user) {\n //Sendet dem Benutzer ein neues Passwort zu\n }\n}\n?>\n")),(0,i.kt)("p",null,"Die Skripts k\xf6nnen dann auf die Controller zur\xfcckgreifen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$userController = new UserController();\n \nif($userController->registerNewUser($_POST['email'], $_POST['password'])) {\n  include(\"templates/registerSuccess.inc.php\");\n} else {\n  include(\"templates/registerFailed.inc.php\");\n}\n?>\n")))}p.isMDXComponent=!0}}]);