"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,u=d["".concat(s,".").concat(m)]||d[m]||b[m]||i;return n?r.createElement(u,l(l({ref:t},c),{},{components:n})):r.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"Abgabe 3",tags:["LB1","Abgabe 3","Sourcecode"]},l="Abgabe 3",o={unversionedId:"lb-0001/abgabe-0003",id:"lb-0001/abgabe-0003",title:"Abgabe 3",description:"GitHub Sourcecode Repo",source:"@site/docs/lb-0001/abgabe-0003.md",sourceDirName:"lb-0001",slug:"/lb-0001/abgabe-0003",permalink:"/lernportfolio-ZZELAV/docs/lb-0001/abgabe-0003",draft:!1,tags:[{label:"LB1",permalink:"/lernportfolio-ZZELAV/docs/tags/lb-1"},{label:"Abgabe 3",permalink:"/lernportfolio-ZZELAV/docs/tags/abgabe-3"},{label:"Sourcecode",permalink:"/lernportfolio-ZZELAV/docs/tags/sourcecode"}],version:"current",frontMatter:{title:"Abgabe 3",tags:["LB1","Abgabe 3","Sourcecode"]},sidebar:"tutorialSidebar",previous:{title:"Abgabe 2",permalink:"/lernportfolio-ZZELAV/docs/lb-0001/abgabe-0002"},next:{title:"Abgabe 4",permalink:"/lernportfolio-ZZELAV/docs/lb-0001/abgabe-0004"}},s={},p=[{value:"1 SQL-Scripts",id:"1-sql-scripts",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"abgabe-3"},"Abgabe 3"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/bztfinformatik/lb1-ZZELAV"},"GitHub Sourcecode Repo")),(0,a.kt)("h2",{id:"1-sql-scripts"},"1 SQL-Scripts"),(0,a.kt)("p",null,"Da Docker-Container die enthalten Daten standardm\xe4ssig nicht auf dem System speichert, m\xfcssen die ben\xf6tigten Daten exportiert werden und beim rebuilden wieder importiert werden. In unserem Fall k\xf6nnen wir dies mit SQL-Scripts machen, welche die Daten in die Datenbank schreibt. Um dies zu machen wird im ",(0,a.kt)("inlineCode",{parentName:"p"},"mysql"),"-Ordner ein ",(0,a.kt)("inlineCode",{parentName:"p"},"initscripts"),"-Ordner angelegt, welcher als Volume im ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose"),"-File eingebaut wird."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-docker",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},"  mysql:\n    image: mysql:8\n    ports:\n      - 3306:3306\n    command: --default-authentication-plugin=mysql_native_password\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n      MYSQL_USER: \n      MYSQL_PASSWORD: \n      MYSQL_DATABASE: meeting_protocol \n    volumes:\n      - ./mysql/initscripts:/docker-entrypoint-initdb.d\n      - ./mysql/mysqldata:/var/lib/mysql/\n")),(0,a.kt)("p",null,"Der ",(0,a.kt)("inlineCode",{parentName:"p"},"initscripts"),"-Ordner sieht in meinem Fall wie folgt aus:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"+---./mysql/initscripts\n|       100_database.sql\n|       101_tableTask.sql\n|       102_tableUser.sql\n|       103_createAdminUser.sql\n|       999_testDataTasks.sql\n|\n")),(0,a.kt)("p",null,"Die Reihenfolge ist entscheidend, daher sollten die Scripts benannt werden. Als erstes wird die Datenbank erstellt (",(0,a.kt)("inlineCode",{parentName:"p"},"100_database.sql"),"), anschliessend werden die Tabellen ",(0,a.kt)("inlineCode",{parentName:"p"},"task")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," importiert (",(0,a.kt)("inlineCode",{parentName:"p"},"101_tableTask.sql"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"102_tableUser.sql"),"). Danach wird noch der Admin-User in der Tabelle ",(0,a.kt)("inlineCode",{parentName:"p"},"user"),"erstellt (",(0,a.kt)("inlineCode",{parentName:"p"},"103_createAdminUser.sql"),"). Als letztes Script werden die Testdaten importiert (",(0,a.kt)("inlineCode",{parentName:"p"},"999_testData.sql"),"). Die Scripts k\xf6nnen ",(0,a.kt)("a",{parentName:"p",href:"/appendix/initscripts_sql"},"hier")," gefunden werden."))}d.isMDXComponent=!0}}]);