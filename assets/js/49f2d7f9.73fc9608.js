"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6635],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>c});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),u=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(d.Provider,{value:n},e.children)},o="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),o=u(t),m=a,c=o["".concat(d,".").concat(m)]||o[m]||h[m]||i;return t?r.createElement(c,l(l({ref:n},s),{},{components:t})):r.createElement(c,l({ref:n},s))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p[o]="string"==typeof e?e:a,l[1]=p;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},l="Auftrag",p={unversionedId:"tag-0003/auftrag",id:"tag-0003/auftrag",title:"Auftrag",description:"1 PHP Tutorial",source:"@site/docs/tag-0003/auftrag.md",sourceDirName:"tag-0003",slug:"/tag-0003/auftrag",permalink:"/lernportfolio-ZZELAV/docs/tag-0003/auftrag",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tag 3",permalink:"/lernportfolio-ZZELAV/docs/tag-0003/"},next:{title:"Reflexion",permalink:"/lernportfolio-ZZELAV/docs/tag-0003/reflexion"}},d={},u=[{value:"1 PHP Tutorial",id:"1-php-tutorial",level:2},{value:"1.1 if-Anweisungen",id:"11-if-anweisungen",level:3},{value:"1.2 Vergleichsoperatoren",id:"12-vergleichsoperatoren",level:3},{value:"1.3 Logische Operatoren",id:"13-logische-operatoren",level:3},{value:"1.3.1 Beispiele",id:"131-beispiele",level:4},{value:"1.4 While-Schleife",id:"14-while-schleife",level:3},{value:"1.5 For-Schleife",id:"15-for-schleife",level:3},{value:"2 Praxisaufgabe &quot;Brauerei Locher&quot;",id:"2-praxisaufgabe-brauerei-locher",level:2}],s={toc:u};function o(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"auftrag"},"Auftrag"),(0,a.kt)("h2",{id:"1-php-tutorial"},"1 PHP Tutorial"),(0,a.kt)("h3",{id:"11-if-anweisungen"},"1.1 if-Anweisungen"),(0,a.kt)("p",null,"Mit ",(0,a.kt)("inlineCode",{parentName:"p"},"if"),"'s k\xf6nnen Bedingungen \xfcberp\xfcft werden. Trifft diese Bedingung zu, k\xf6nnen Anweisungen ausgef\xfchrt werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nif(Bedingung)\n   {\n   Anweisung\n   }\n?>\n")),(0,a.kt)("p",null,"Die Bedingung wird in Klammern direkt nach dem ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," geschrieben. In den geschwungenen Klammern wird die auszuf\xfchrende Anweisung geschrieben. Diese Anweisung wird ausgef\xfchrt, wenn die Bedingung zutrifft (",(0,a.kt)("inlineCode",{parentName:"p"},"true"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$user = "Nils";\n\nif($user == "Nils") \n   {\n   echo "Hallo Nils";\n   }\n?>\n')),(0,a.kt)("p",null,"Diese Bedingung \xfcberpr\xfcft, ob die Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"$user")," den Wert ",(0,a.kt)("inlineCode",{parentName:"p"},"Nils")," beinhaltet. Da dies der Fall ist, wird die Anweisung ",(0,a.kt)("inlineCode",{parentName:"p"},'echo "Hallo Nils";')," ausgef\xfchrt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$user = "Nils";\n\nif($user == "Hans") \n   {\n   echo "Hallo Hans";\n   }\n?>\n')),(0,a.kt)("p",null,"Hier wird die Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"$user")," auf den Wert ",(0,a.kt)("inlineCode",{parentName:"p"},"Hans")," \xfcberpr\xfcft. Diese Bedingung trifft nicht zu (",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"), dadurch wird die Anweisung nicht ausgef\xfchrt."),(0,a.kt)("p",null,"M\xf6chte man eine Ausgabe, wenn eine Bedingung nicht zutrifft kann die ",(0,a.kt)("inlineCode",{parentName:"p"},"if-else"),"-Anweisung genutzt werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nif(Bedingung) \n   {\n   Anweisung\n   } \nelse \n   {\n   Anweisung\n   }\n?>\n")),(0,a.kt)("p",null,"Der ",(0,a.kt)("inlineCode",{parentName:"p"},"else"),"-Teil wird dann ausgef\xfchrt, wenn die Bedingung ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ist."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$user = "Klaus";\n\nif($user == "Nils") \n   {\n   echo "Hallo Nils";\n   } \nelse \n   {\n   echo "Du bist nicht Nils!";\n   }\n?>\n')),(0,a.kt)("p",null,"Hier wird wieder auf ",(0,a.kt)("inlineCode",{parentName:"p"},"Nils")," \xfcberpr\xfcft. Dies ist nicht zutreffend, daher wird der ",(0,a.kt)("inlineCode",{parentName:"p"},"else"),"-Teil ausgef\xfchrt, also ",(0,a.kt)("inlineCode",{parentName:"p"},'echo "Du bist nicht Nils!";'),"."),(0,a.kt)("p",null,"if-Anweisungen k\xf6nnen auch verschachtelt werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$vorname = "Nils";\n$nachname = "Reimers";\n\n\nif($vorname=="Nils")\n   {\n   echo "Hallo Nils";\n\n   if($nachname=="Reimers")\n      {\n      echo "Reimers";\n      }\n   }\nelse\n   {\n   echo "Du bist nicht Nils";\n   }\n?>\n')),(0,a.kt)("p",null,"Hier wird als erstes \xfcberpr\xfcft, ob ",(0,a.kt)("inlineCode",{parentName:"p"},"$vorname")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Nils")," ist. Trifft dies zu wird ",(0,a.kt)("inlineCode",{parentName:"p"},"Hallo Nils")," ausgegeben und eine weitere Bedingung \xfcberpr\xfcft. Diese pr\xfcft, ob ",(0,a.kt)("inlineCode",{parentName:"p"},"$nachname")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Reimers")," ist. Trifft dies auch noch zu wird dazu noch ",(0,a.kt)("inlineCode",{parentName:"p"},"Reimers")," ausgegeben. Trifft die erste Bedingung nicht zu (",(0,a.kt)("inlineCode",{parentName:"p"},'$vorname=="Nils"'),"), wird ",(0,a.kt)("inlineCode",{parentName:"p"},"Du bist nicht Nils")," ausgegeben."),(0,a.kt)("p",null,"Mit einem ",(0,a.kt)("inlineCode",{parentName:"p"},"else if")," k\xf6nnen nach einem ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," auch auf weitere Bedingung \xfcberpr\xfcft werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$user = "Nils";\n\nif($user=="Nils")\n   {\n   echo "Hallo Nils";\n   }\nelse if($user == "Reimers")\n   {\n   echo "Hallo Herr Reimers";\n   }\nelse if($user == "Meier")\n   {\n   echo "Hallo Herr Meier";\n   }\nelse\n   {\n   echo "Du bist weder Herr Reimers noch Herr Meier";\n   }\n\n?>\n')),(0,a.kt)("p",null,"Im ersten ",(0,a.kt)("inlineCode",{parentName:"p"},"else if")," wird \xfcberpr\xfcft, ob ",(0,a.kt)("inlineCode",{parentName:"p"},"$user")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Reimers")," ist. Trifft dies nicht zu geht es weiter zum zweiten ",(0,a.kt)("inlineCode",{parentName:"p"},"else if"),"."),(0,a.kt)("p",null,"Es kann auch \xfcberpr\xfcft werden, ob eine Bedingung nicht zutrifft."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$user = "Nils";\n\nif($user != "Nils")\n   {\n   echo "Du bist nicht Nils";\n   }\nelse\n   {\n   echo "Hallo Nils";\n   }\n?>\n')),(0,a.kt)("p",null,"Hier wird \xfcbepr\xfcft, ob ",(0,a.kt)("inlineCode",{parentName:"p"},"$user")," ",(0,a.kt)("strong",{parentName:"p"},"nicht")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Nils")," ist."),(0,a.kt)("h3",{id:"12-vergleichsoperatoren"},"1.2 Vergleichsoperatoren"),(0,a.kt)("p",null,"Mit Vergleichsoperatoren k\xf6nnen Werte und Variablen verglichen werden."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Erl\xe4uterung"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a == $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Gleich"),(0,a.kt)("td",{parentName:"tr",align:null},"Dieser Vergleich ist erf\xfcllt, falls ",(0,a.kt)("inlineCode",{parentName:"td"},"$a")," und ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," den selben Wert beinhaltet. Sind die Typen der Variablen verschieden, so werden die konvertiert.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a === $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Identisch"),(0,a.kt)("td",{parentName:"tr",align:null},"Dieser Vergleich ist erf\xfcllt, falls ",(0,a.kt)("inlineCode",{parentName:"td"},"$a")," und ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," den selben Typ und den Inhalt besitzen. W\xe4re ein Wert vom Typ int und der andere from Typ String, so w\xfcrde false zur\xfcck gegeben werden.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a != $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Ungleich"),(0,a.kt)("td",{parentName:"tr",align:null},"Dieser Vergleich ist erf\xfcllt, falls ",(0,a.kt)("inlineCode",{parentName:"td"},"$a")," und ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," nicht den selben Wert beinhaltet. Sind die Typen der Variablen verschieden, so werden die konvertiert.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a !== $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Nicht identisch"),(0,a.kt)("td",{parentName:"tr",align:null},"Dieser Vergleich ist erf\xfcllt, falls ",(0,a.kt)("inlineCode",{parentName:"td"},"$a")," und ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," einen unterschiedlichen Typ haben oder einen unterschiedlichen Wert.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a < $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Kleiner"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a")," muss kleiner als ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," sein.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a <= $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Kleiner gleich"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a")," muss kleiner oder gleich ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," sein.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a > $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Gr\xf6sser"),(0,a.kt)("td",{parentName:"tr",align:null},"$a muss gr\xf6\xdfer als $b sein.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a >= $b")),(0,a.kt)("td",{parentName:"tr",align:null},"Gr\xf6sser gleich"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"$a")," muss gr\xf6\xdfer oder gleich ",(0,a.kt)("inlineCode",{parentName:"td"},"$b")," sein.")))),(0,a.kt)("h3",{id:"13-logische-operatoren"},"1.3 Logische Operatoren"),(0,a.kt)("p",null,"Um in ",(0,a.kt)("inlineCode",{parentName:"p"},"if"),"-Anweisungen nicht nur einen Bedingung gleichzeitig zu \xfcberpr\xfcfen, k\xf6nnen logische Operatoren genutzt werden. Mit diesen k\xf6nnen mehrere Bedingungen \xfcberpr\xfcft werden."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"alternative Schreibweise"),(0,a.kt)("th",{parentName:"tr",align:null},"Erl\xe4uterung"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"&&")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"AND")),(0,a.kt)("td",{parentName:"tr",align:null},"Beide Bedingungen m\xfcssen erf\xfcllt werden.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"|","|"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"OR")),(0,a.kt)("td",{parentName:"tr",align:null},"Mindestens eine Bedingung muss erf\xfcllt werden.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"!")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Diese Bedingung darf nicht zutreffen.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"( ... )")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Mit Klammern k\xf6nnen Bedingungen gruppiert werden.")))),(0,a.kt)("h4",{id:"131-beispiele"},"1.3.1 Beispiele"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="AND und OR"',title:'"AND',und:!0,'OR"':!0},'<?php \n$username = "Nils"; \n$passwort = "php-einfach"; \nif($username == "Nils" AND $passwort == "php-einfach") { \n   echo "Beide Bedingungen waren erf\xfcllt - Zugriff erlaubt. <br />"; \n} \n\nif($username == "Nils" OR $passwort == "php-einfach") {\n  echo "Eine oder beide Bedingungen waren erf\xfcllt.";\n}\n?>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Negation"',title:'"Negation"'},'<?php\n$zahl = 25;\n\nif($zahl >= 10 AND $zahl <= 20) {\n   echo "Die Zahl ist zwischen 10 und 20. <br />";\n}\n\nif( !($zahl >= 10 AND $zahl <= 20) ) {\n   echo "Die Zahl war NICHT zwischen 10 und 20 <br />";\n}\n?>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Gruppieren"',title:'"Gruppieren"'},'<?php\n$username = "Nils";\n$passwort = "php-einfach";\n\nif( ($username == "Nils" AND $passwort == "php-einfach") OR ($username == "Paul" AND $passwort == "geheim") ) {\n  echo "Benutzername und Passwort passten zusammen. <br />";\n}\n\nif( $username == "Nils" AND ($passwort == "php-einfach" OR $passwort == "geheim") ) {\n  echo "Der Benutzername war Nils, und das Passwort entweder php-einfach oder geheim.";\n}\n')),(0,a.kt)("h3",{id:"14-while-schleife"},"1.4 While-Schleife"),(0,a.kt)("p",null,"Mit ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleifen k\xf6nnen Anweisungen solange ausgef\xfchrt werden, bis ein bestimmtes Ergebnis eintritt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nwhile(Bedingung)  {\nAnweisungen\n}\n?>\n")),(0,a.kt)("p",null,"Im folgenden Beispiel werden die Zahlen 0-10 per ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife ausgegeben."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$i = 0;\nwhile($i < 10) {\n   echo "$i, ";\n   $i++;\n}\n?>\n')),(0,a.kt)("p",null,"Als erstes wird eine Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"$i")," mit dem Wert ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," initialisiert. Die Bedingung in der ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife \xfcberpr\xfcft ob ",(0,a.kt)("inlineCode",{parentName:"p"},"$i")," kleiner als 10 ist, trifft dies zu, wird die Variable ausgegeben und um eins erh\xf6ht."),(0,a.kt)("p",null,"Abl\xe4ufe k\xf6nnen auch w\xe4hrend der Laufzeit beeinflusst werden. Daf\xfcr gibt es die zwei Befehle ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"continue"),"."),(0,a.kt)("p",null,"Mit einem ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," k\xf6nnen Abl\xe4ufe beendet werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$max = 30;\n$zaehler = 0;\n$increment = 2;\n\nwhile($zaehler < $max) {\n   if($zaehler == 10) {\n      echo "Bei der Zahl 10 h\xf6ren wir auf";\n      break;\n   }\n   echo "$zaehler , ";\n   $zaehler += $increment; //Erh\xf6ht den $zaehler um den Wert $increment\n}\n?>\n')),(0,a.kt)("p",null,"In diesem Skript wird per ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," \xfcberpr\xfcft, ob die Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"$zaehler")," kleiner als ",(0,a.kt)("inlineCode",{parentName:"p"},"$max")," ist und anschliessend per ",(0,a.kt)("inlineCode",{parentName:"p"},"if"),", ob ",(0,a.kt)("inlineCode",{parentName:"p"},"$zaehler")," den Wert ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," hat. Ist das der Fall, wird per ",(0,a.kt)("inlineCode",{parentName:"p"},"echo")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Bei der Zahl 10 h\xf6ren wir auf")," ausgegeben und die ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife per ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," beendet. Trifft die Bedingung aus dem ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," nicht zu, wird nur der Wert von ",(0,a.kt)("inlineCode",{parentName:"p"},"$zaehler")," ausgegeben und um 2 per ",(0,a.kt)("inlineCode",{parentName:"p"},"$increment")," erh\xf6ht."),(0,a.kt)("p",null,"Wird ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," genutzt, springt der Ablauf wieder zum Schleifenanfang und macht von dort aus weiter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$max = 30;\n$zaehler = 0;\n$increment = 2;\n\nwhile($zaehler < $max) {\n   $zaehler += $increment; //Erh\xf6ht den $zahler um den Wert $increment\n   if($zaehler >= 10 AND $zaehler <= 15) {\n      echo "Eine Zahl zwischen 10 und 15 <br>";\n      continue;\n   }\n\n   echo "$zaehler <br>"; \n}\n?>\n')),(0,a.kt)("p",null,"W\xe4hrend ",(0,a.kt)("inlineCode",{parentName:"p"},"$zaehler")," kleiner als ",(0,a.kt)("inlineCode",{parentName:"p"},"$max")," ist wird die Z\xe4hler-Variable um 2 erh\xf6ht und per ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," \xfcberpr\xfcft, ob sie zwischen 10 und 15 ist. Ist der Wert dazwischen, wird ",(0,a.kt)("inlineCode",{parentName:"p"},"Eine Zahl zwischen 10 und 15")," ausgegeben und per ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," wieder an den Schleifenanfang gegangen. Da ",(0,a.kt)("inlineCode",{parentName:"p"},"$zaehler")," noch nicht ",(0,a.kt)("inlineCode",{parentName:"p"},"$max")," erreicht hat, geht der Prozess weiter. H\xe4tte man ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," anstatt ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," genutzt w\xfcrde die Ausgabe nur einmal ausgegeben werden und dann die Schleife beendet werden."),(0,a.kt)("p",null,"Eine weitere Art der ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife ist die ",(0,a.kt)("inlineCode",{parentName:"p"},"do-while"),"-Schleife. Diese \xfcberpr\xfcft eine Bedingung erst nach der Anweisung. Somit wird diese Schleife immer mindestens einmal ausgef\xfchrt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\ndo  {\nAnweisungen\n}  while(Bedingung);\n?>\n")),(0,a.kt)("p",null,"M\xf6chte man eine zuf\xe4llige Zahl zwischen 0 und 10 oder 20 und 30 generieren, w\xfcrde das mit einer ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife wie folgt aussehen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n$zufall = rand(0, 30);\nwhile($zufall > 10 AND $zufall < 20) {\n   $zufall = rand(0, 30);\n}\n\necho "Unsere Zufallszahl: $zufall";\n?>\n')),(0,a.kt)("p",null,"Als erstes muss die Zufallszahl von 0 bis 30 generiert werden und anschliessend \xfcberpr\xfcft werden ob die Zufallszahl zwischen 10 und 20 ist. Trifft dies zu, muss sie neu generiert werden."),(0,a.kt)("p",null,"Das kann mit einer ",(0,a.kt)("inlineCode",{parentName:"p"},"do-while"),"-Schleife einfacher und k\xfcrzer gemacht werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\ndo {\n   $zufall = rand(0, 30);\n} while($zufall > 10 AND $zufall < 20);\n\necho "Unsere Zufallszahl: $zufall";\n?>\n')),(0,a.kt)("p",null,"Im ",(0,a.kt)("inlineCode",{parentName:"p"},"do"),"-Teil generieren wir die Zufallszahl zwischen 0 und 30 und anschliessend wir mit einem ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," \xfcberpr\xfcft, ob sie zwischen 10 und 20 ist."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleifen werden dann genutzt, wenn vorab nicht klar ist, wie viele Durchl\xe4ufe es geben wird."),(0,a.kt)("h3",{id:"15-for-schleife"},"1.5 For-Schleife"),(0,a.kt)("p",null,"Die ",(0,a.kt)("inlineCode",{parentName:"p"},"for"),"-Schleife funktioniert \xe4hnlich wie die ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife. Sie f\xfchrt auch Anweisung aus, solange eine Bedingung stimmt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nfor(Startwert;  Bedingung;  Schleifenschritt)  {\nAnweisungen\n}\n?>\n")),(0,a.kt)("p",null,"M\xf6chte man wie bei der ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleife die Zahlen von 0 bis 10 durchz\xe4hlen, kann das mit einer ",(0,a.kt)("inlineCode",{parentName:"p"},"for"),"-Schleife wie folgt gemacht werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nfor($i=0; $i < 10; $i++) {\n   echo "$i, ";\n}\n?>\n')),(0,a.kt)("p",null,"Als erstes wird die Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"$i")," auf ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"  gesetzt (Startwert). Nach dem ersten Semikolon folgt die Bedingung, die kann wie bei den ",(0,a.kt)("inlineCode",{parentName:"p"},"if"),"'s und ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"'s geschrieben werden. Als letztes wird noch bestimmt, was jeweils nach dem Ausf\xfchrend der Schleife passieren soll, in diesem Fall soll ",(0,a.kt)("inlineCode",{parentName:"p"},"$i")," und eins erh\xf6ht werden."),(0,a.kt)("p",null,"Der Startwert, die Bedingung und der Schleifenschritt m\xfcssen nicht unbedingt gesetzt werden. Eine ",(0,a.kt)("inlineCode",{parentName:"p"},"for"),"-Schleife kann auch leer sein."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nfor( ; ; ) {\nAnweisungen\n}\n?>\n")),(0,a.kt)("p",null,"Wie bei den ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"-Schleifen k\xf6nnen bei den ",(0,a.kt)("inlineCode",{parentName:"p"},"for"),"-Schleifen auch ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," genutzt werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nfor($i=0; $i < 20; $i++) {\n   if($i == 13) {\n     echo "Dreizehn ist eine Ungl\xfcckszahl!!! <br>";\n     break;\n   }\n\n   echo "$i, ";\n}\n?>\n')),(0,a.kt)("p",null,"Hier wird der Ablauf abgebrochen sobald ",(0,a.kt)("inlineCode",{parentName:"p"},"$i")," den Wert ",(0,a.kt)("inlineCode",{parentName:"p"},"13")," erreicht hat."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nfor($i=0; $i < 20; $i++) {\n   if($i == 13) {\n     echo "Dreizehn ist eine Ungl\xfcckszahl!!! <br>";\n     continue;\n   }\n\n   echo "$i, ";\n}\n?>\n')),(0,a.kt)("p",null,"Wird ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," genutzt, wird bei der Zahl 13 wieder an den Anfang der Schleife gesprungen."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"for"),"-Schleifen werden dann genutzt wenn etwas hochgez\xe4hlt werden muss und vorab klar ist wie viele Durchl\xe4ufe es geben wird."),(0,a.kt)("h2",{id:"2-praxisaufgabe-brauerei-locher"},'2 Praxisaufgabe "Brauerei Locher"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="./app/index.php"',title:'"./app/index.php"'},'<!DOCTYPE html>\n<html lang="de">\n\n<head>\n   <meta charset="UTF-8">\n   <meta http-equiv="X-UA-Compatible" content="IE=edge">\n   <meta name="viewport" content="width=device-width, initial-scale=1.0">\n   <title>Brauerei Locher</title>\n</head>\n\n<body>\n   <h1>Brauerei Locher</h1>\n   <form action="./form.php" method="post">\n      <div class="anrede-container">\n         Anrede:\n         <input type="radio" name="anrede" id="anrede_mann" value="Mann" required>\n         <label for="anrede_mann">Mann</label>\n         <input type="radio" name="anrede" id="anrede_frau" value="Frau" required>\n         <label for="anrede_frau">Frau</label>\n         <input type="radio" name="anrede" id="anrede_undefiniert" value="undefiniert" required>\n         <label for="anrede_undefiniert">undefiniert</label>\n      </div>\n      <div class="koordinaten-container">\n         Name:\n         <input type="text" name="kundenname" id="kundenname" required><br>\n         Adresse:\n         <input type="text" name="adresse" id="adresse" required><br>\n         Mailadresse:\n         <input type="email" name="email" id="email" required><br>\n      </div>\n      <div class="produkte-container">\n         <input type="checkbox" name="produkt[]" id="produkt_nicht_alkohol" value="Nicht alkoholische Getr\xe4nke">\n         <label for="produkt_nicht_alkohol">Nicht alkoholische Getr\xe4nke</label><br>\n         <input type="checkbox" name="produkt[]" id="produkt_schnaps" value="Schn\xe4pse">\n         <label for="produkt_schnaps">Schn\xe4pse</label><br>\n         <input type="checkbox" name="produkt[]" id="produkt_bier" value="Bier">\n         <label for="produkt_bier">Bier</label>\n      </div>\n      <div class="bemerkungen-container">\n         <textarea name="bemerkung" id="bemerkung" cols="60" rows="10"></textarea>\n      </div>\n      <input type="submit" value="Absenden">\n   </form>\n</body>\n\n</html>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="./app/form.php"',title:'"./app/form.php"'},'<?php\n\nif(isset($_POST["anrede"]))\n$anrede = $_POST["anrede"];\n$kundenname = $_POST["kundenname"];\n$adresse = $_POST["adresse"];\n$email = $_POST["email"];\n$produkt = $_POST["produkt"];\n$bemerkung = $_POST["bemerkung"];\n\n?>\n\n<!DOCTYPE html>\n<html lang="de">\n\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Brauerei Locher</title>\n</head>\n\n<body>\n    <h1>Brauerei Locher</h1>\n    <p>\n        <?php\n        if ($anrede == "Mann")\n        echo "Sehr geehrter Herr ";\n\n        if ($anrede == "Frau")\n        echo "Sehr geehrte Frau ";\n\n        if ($anrede == "undefiniert")\n        echo "Hallo ";\n\n        echo $kundenname . ",<br>";\n        echo "Vielen Dank f\xfcr Ihre Bestellung.<br>Folgend k\xf6nnen Sie nochmals alle ausgef\xfcllten Informationen sehen.<br><br>";\n        echo "Bestellte Produkte:<br>";\n\n        if(isset($produkt[0]))\n        echo "- " . $produkt[0] . "<br>";\n\n        if(isset($produkt[1]))\n        echo "- " . $produkt[1] . "<br>";\n\n        if(isset($produkt[2]))\n        echo "- " . $produkt[2] . "<br>";\n\n        if(!empty($bemerkung))\n        echo "Bemerkung:<br>" . $bemerkung . "<br>";\n\n        echo "<br>Rechnungs- und Lieferadresse:<br>";\n        echo $kundenname . "<br>";\n        echo $adresse . "<br><br>";\n\n        echo "Diese \xdcbersicht wird Ihnen auch per E-Mail an " . $email . " gesendet.<br><br>";\n\n        echo "Freundliche Gr\xfcsse<br>";\n        echo "Brauerei Locher";\n        ?>\n    </p>\n</body>\n\n</html>\n')))}o.isMDXComponent=!0}}]);