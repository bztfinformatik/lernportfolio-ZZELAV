"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9866],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(t),p=i,f=m["".concat(l,".").concat(p)]||m[p]||c[p]||o;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:i,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const o={},a="LB2 Concept Map",s={unversionedId:"lb2_concept_map",id:"lb2_concept_map",title:"LB2 Concept Map",description:"",source:"@site/appendix/lb2_concept_map.md",sourceDirName:".",slug:"/lb2_concept_map",permalink:"/lernportfolio-ZZELAV/appendix/lb2_concept_map",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Initscripts SQL",permalink:"/lernportfolio-ZZELAV/appendix/initscripts_sql"},next:{title:"PlantUML CSR",permalink:"/lernportfolio-ZZELAV/appendix/plantuml_csr"}},l={},d=[],u={toc:d};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lb2-concept-map"},"LB2 Concept Map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plantuml"},'@startuml\n\n\' ### Vorgegebene Begriffe ###\n(SSR)\n(CSR)\n(Template-Engine) as (TE)\n(Use-Case) as (UC)\n(Aktoren)\n(Funktionale Anforderung) as (FA)\n(Testszenario) as (TS)\n(Testfall) as (TF)\n\n\' ### Hilfsbegriffe ###\n(Rendering)\n(Twig)\n\n\' ### Map ###\n(Rendering) <---\x3e (SSR)\n(Rendering) <---\x3e (CSR)\n(SSR) <---\x3e (CSR)\n\n(FA) <---\x3e (TS)\n(FA) <---\x3e (TF)\n(FA) <---\x3e (UC)\n(FA) <---\x3e (Aktoren)\n(TF) <---\x3e (TS)\n\n(TE) <---\x3e (Twig)\n\n\' ### Notes ###\nnote right of (Rendering)\n  Code in eine Webseite umwandeln\nend note\n\nnote right of (SSR)\n  Server-Side Rendering, die Webseite wird auf dem\n  Server gerendert.\n  Z.B. PHP, wird auf dem Server\n  kompiliert und anschliessend als HTML-Datei\n  an den Client geschickt.\nend note\n\nnote right of (CSR)\n  Client-Side Rendering, die Webseite wird auf dem\n  Client gerendert.\n  Es wird eine einzige HTML-Datei geschickt, und mit JavaScript\n  gerendert.\nend note\n\nnote right of (TE)\n  Eine Template-Engine ist eine Vorlagen-Datei/Struktur,\n  die Platzhalter mit Inhalt ersetzen kann.\nend note\n\nnote right of (Twig)\n  Template-Engine f\xfcr PHP\nend note\n\nnote right of (FA)\n  Eine Eigenschaft/Leistung die\n  ein Programm erreichen muss.\nend note\n\nnote right of (Aktoren)\n  Eine Rolle in einem Programm.\n  Jede Rolle hat andere Funktionen und Berechtigungen.\n  Z.B. kann der Aktor "Admin" in einem Programm\n  andere Aktoren und das Programm verwalten.\n  Ein Aktor "Gast" k\xf6nnte nur Daten lesen.\nend note\n\nnote right of (TF)\n  Ein Test auf Funktionen in einem Programm.\n  Z.B. kann sich ein User anmelden.\nend note\n\nnote right of (TS)\n  Eine Kombination aus mehreren Testf\xe4llen.\n  Z.B. User kann neuen Auftrag erfassen.\n  Daf\xfcr braucht es den Testfall "User kann sich anmelden"\n  und "Auftrag erfassen erfolgreich".\nend note\n\nnote right of (UC)\n  Use-Case ist eine Beschreibung,\n  was ein Programm machen soll.\nend note\n\n@enduml\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plantuml"},'@startuml\n\n\' ### Vorgegebene Begriffe ###\n(if-Funktion bei Twig) as (if)\n(Mocking von Daten) as (mock)\n(Rendern von View) as (rendV)\n(empty-Funktion) as (empFunc)\n(sanitizen von Daten) as (san)\n\n\' ### Hilfsbegriffe ###\n(Twig)\n(PHP)\n(Model)\n\n\' ### Map ###\n(Twig) <---\x3e (if) : {% if %}\n(Twig) <---\x3e (rendV) : Mit Twig eine View (Template) erstellen\n\n(PHP) <---\x3e (mock) : Fakedaten mittels Array erstellen\n(PHP) <---\x3e (empFunc) : \xfcberpr\xfcfen ob Variable leer ist\n(PHP) <---\x3e (san) : Mit FILTER_SANITIZE_* Eingabe reinigen\n\n(rendV) <---\x3e (mock) : Die Mocking-Daten in die View laden\n\n(mock) <---\x3e (Model) : Die Daten werden im Model erstellt\n\n(empFunc) <---\x3e (if) : empty() in if nutzen um zu \xfcberpr\xfcfen\n\n\' ### Notes ###\nnote bottom of (if)\n  In Twig k\xf6nnen if-Funktionen\n  wie im PHP geschrieben werden.\n  Somit kann bei einem True-Statement\n  eine andere Ausgabe angezeigt\n  werden, als bei einem False-Statement.\nend note\n\nnote right of (mock)\n  Mocking ist das vort\xe4uschen von Daten.\n  Somit kann beim entwickeln von\n  einem Programm ohne komplexe Datenbank\n  gearbeitet werden.\nend note\n\nnote right of (rendV)\n  Die View ist die Benutzer\xf6berfl\xe4che,\n  welche der Enduser zu sehen bekommt.\n  Diese wird bei Twig in HTML geschrieben.\n  Mithilfe vom Controller und des Models\n  werden dann die Daten aus einer Datenbank\n  in die View geladen.\nend note\n\nnote right of (empFunc)\n  die empty-Funktion \xfcberpr\xfcft ob eine Variable leer ist.\n  Trifft dies zu, wird true zur\xfcckgegeben.\n  Z.B. kann \xfcberpr\xfcft werden ob in der Variable\n  $username etwas enthalten ist.\n  \n  $username = "";\n  if (empty($username)) { // username leer => true\n    echo "Username is empty";\n  }\nend note\n\nnote right of (san)\n  Mit dem Sanitizen k\xf6nnen mit Filtern Inputs\n  bereinigt werden. Das sanitizen ist wichtig f\xfcr\n  die Sicherheit, z.B. f\xfcr eine Datenbank (SQL-Injection).\n  Somit wird aus "<h1>Hello World</h1>"\n  mit dem Filter FILTER_SANITIZE_STRING\n  "Hello World".\n  \n  <?php\n  $str = "<h1>Hello World!</h1>";\n  $newstr = filter_var($str, FILTER_SANITIZE_STRING);\n  echo $newstr; // Gibt "Hello World" aus\n  ?>\nend note\n\n@enduml\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plantuml"},"@startuml\n\n' ### Vorgegebene Begriffe ###\n(mysql-Extension) as (mysql-e)\n(mysqli-Extension) as (mysqli-e)\n(PDO)\n(PostgreSQL)\n(MySQL)\n(Prepared-Statement) as (prepState)\n(SQL-Injection) as (sql-inj)\n\n' ### Hilfsbegriffe ###\n(Datenbankverbindung) as (dbconn)\n(DBMS)\n(Security)\n\n' ### Map ###\n(dbconn) <---\x3e (mysql-e) : veraltet\n(dbconn) <---\x3e (mysqli-e) : new mysqli()\n(dbconn) <---\x3e (PDO) : new PDO(), $pdo->prepare()\n\n(mysql-e) ---\x3e (mysqli-e) : Weiterentwicklung\n\n(DBMS) <---\x3e (PostgreSQL) : objektrelational\n(DBMS) <---\x3e (MySQL) : relational\n\n(Security) <---\x3e (prepState) : Platzhalter-Daten\n(Security) <---\x3e (sql-inj) : Sicherheitsl\xfccke ausnutzen\n\n' ### Notes ###\nnote left of (mysql-e)\n  Ist eine veraltete Extension,\n  die nicht mehr genutzt werden soll\n  und kann kein OOP.\nend note\n\nnote bottom of (mysqli-e)\n  Ist die Weiterentwicklung von mysql und\n  OOP ist m\xf6glich.\n  Das i steht f\xfcr improved.\nend note\n\nnote bottom of (PDO)\n  PDO ist rein OOP und ist bekannt f\xfcr die\n  hohe Performance. Der Vorteil von PDO ist,\n  dass die Statements zuerst einmal vorbereitet\n  werden und anschliessend mehrmals ausgef\xfchrt werden k\xf6nnen.\nend note\n\nnote bottom of (PostgreSQL)\n  Open Source,\n  wurde in den 1980er entwickelt\n  und seit dem Jahr 1997 von der\n  Open-Source-Community weiterentwickelt.\nend note\n\nnote bottom of (MySQL)\n  Ist das am verbreiteste Management-System f\xfcr SQL\n  und ist Open-Source. Es ist f\xfcr verschiedene\n  Betriebssysteme verf\xfcgbar und bildet\n  eine Grundlage f\xfcr dynamische Webapplikationen.\nend note\n\nnote bottom of (prepState)\n  Mit Prepared-Statements k\xf6nnen SQL-Querys\n  mit hoher Effizienz ausgef\xfchrt werden.\n  Die Query wird dabei ohne Daten an die Datenbank gesendet.\n  Die Platzhalter werden sp\xe4ter eingef\xfcllt.\nend note\n\nnote bottom of (sql-inj)\n  Bei der SQL-Injection wird eine Sicherheitsl\xfccke\n  in SQL-Datenbanken ausgenutzt. Dabei werden\n  Daten b\xf6sartig gel\xf6scht oder ver\xe4ndert.\nend note\n\nnote top of (DBMS)\n  Datenbankmanagementsystem\nend note\n\n@enduml\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plantuml"},"@startuml\n\n' ### Vorgegebene Begriffe ###\n(Sessions) as (S)\n(Cookie) as (C)\n($_COOKIE) as ($C)\n($_SESSION) as ($S)\n(session_helper.php) as (SH)\n(Authorisierung) as (A)\n(JSON) as (J)\n\n' ### Hilfsbegriffe ###\n(Zustand) as (Z)\n(Superglobal) as (SG)\n\n' ### Map ###\n(S) <---\x3e ($S)\n(C) <---\x3e ($C)\n\n(SH) <---\x3e ($S)\n(A) <---\x3e (S)\n\nA <---\x3e (J)\n\n($S) <---\x3e (SG)\n($C) <---\x3e (SG)\n\n(S) <---\x3e (Z)\n(C) <---\x3e (Z)\n\n' ### Notes ###\nnote right of (S)\n  Eine Folge von Anfragen, die von einem Benutzer an eine Website oder Anwendung gestellt werden.\n  Eine Session wird auf dem Server gespeichert und kann \xfcber eine Session-ID verwaltet werden.\nend note\n\nnote top of (C)\n  Eine kleine Textdatei, die auf dem Computer des Benutzers gespeichert wird.\n  Cookies k\xf6nnen verwendet werden, um Informationen \xfcber den Benutzer zwischenzuspeichern.\nend note\n\nnote right of ($C)\n  Eine Superglobal-Variable in PHP, die alle Cookies enth\xe4lt, die von einer Website gesetzt wurden.\n  Sie kann verwendet werden, um auf die Werte von Cookies zuzugreifen und sie zu verwenden.\nend note\n\nnote right of ($S)\n  Eine Superglobal-Variable in PHP, die alle Session-Variablen enth\xe4lt.\n  Sie kann verwendet werden, um auf die Werte von Session-Variablen zuzugreifen und sie zu verwenden.\nend note\n\nnote top of (SH)\n  Ein Session-Helper ist eine Art von Hilfsskript, das verwendet wird, um die Verwaltung von Sessions zu vereinfachen.\n  Um Session zu nutzen muss session_start() genutzt werden.\n  Mit dem Session-Helper muss nich in jedem PHP-File die Funktion aufgerufen werden.\nend note\n\nnote right of (A)\n  Authorisierung ist der Prozess, bei dem festgestellt wird, ob ein Benutzer berechtigt ist,\n  auf bestimmte Klassen oder Funktionen zuzugreifen.\nend note\n\nnote bottom of (J)\n  JSON (JavaScript Object Notation) ist ein Datenformat, das h\xe4ufig zum Austausch von strukturierten Daten im Internet verwendet wird.\n  Es ist eine Textdarstellung von Objekten in JavaScript und kann leicht von verschiedenen Programmiersprachen eingesetzt werden.\nend note\n\n@enduml\n")))}m.isMDXComponent=!0}}]);